//
// Created by Devin on 2021/2/3.
//

#include <iostream>

/**
 * 1、编写代码分别更改指针的值以及指针所指对象的值
 */
int modifyPoint(void) {
    int iVal = 10, *p = &iVal;
    // 修改指针所指对象的值
    *p = 20;
    // 修改指针的值
    p = nullptr;
    std::cout << p << ' ' << iVal;
    return 0;
}


/**
 * 说明指针和引用的主要区别:
 *    1、指针本身是对象，引用是对象的别名；
 *    2、指针可以为空，引用不能为空，定义引用的时候必须初始化；
 *    3、指针可以不指向任何对象，使用指针前需判空操作，而引用不需要
 *    4、引用一旦定义之后不能改变指向，指针可以改变指向
 *    5、指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名，引用不改变指向
 *    6、引用比指针更安全
 *    7、如果你有一个变量是用于指向另一个对象，但是它可能为空，这时你应该使用指针；
 *      如果变量总是指向一个对象，你的设计不允许变量为空，这时你应该使用引用
 */

int main(void) {
    int iVal = 1024;
    int *p = &iVal;
    // 指向指针的指针
    int **q = &p;

    int i = 20;
    int *ip;  // ip是一个int型指针
    // r是对指针ip的引用
    // 要理解r的类型到底是什么，最简单的办法是从右向左阅读r的定义。
    // 离变量名最近的符号（此例中是&r的符号&）对变量的类型有最直接的影响，因此r是一个引用。
    // 声明符的其余部分用以确定r引用的类型是什么，此例中的符号＊说明r引用的是一个指针。
    // 最后，声明的基本数据类型部分指出r引用的是一个int指针
    int *&r = ip;
    // r引用了一个指针，对r赋值&i就是令p指向变量i
    r = &i;
    // r引用了一个指针，对r解引用得到i(也就是p指向的对象)，将i的值改为0
    *r = 0;
    return 0;
}